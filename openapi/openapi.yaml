openapi: 3.0.0
info:
  title: Teldrive
  version: 0.0.0
tags:
  - name: Auth
  - name: Files
  - name: Uploads
  - name: Users
  - name: Shares
paths:
  /api/auth/login:
    post:
      operationId: Auth_login
      summary: Login
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreate'
  /api/auth/logout:
    post:
      operationId: Auth_logout
      summary: Logout
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Auth
      security:
        - BearerAuth: []
  /api/auth/session:
    get:
      operationId: Auth_session
      summary: Get session information
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
      tags:
        - Auth
  /api/auth/ws:
    get:
      operationId: Auth_ws
      summary: Websocket QR Login
      parameters: []
      responses:
        '101':
          description: Informational
      tags:
        - Auth
  /api/files:
    get:
      operationId: Files_list
      summary: List all files
      parameters:
        - $ref: '#/components/parameters/FileQuery.name'
        - $ref: '#/components/parameters/FileQuery.query'
        - $ref: '#/components/parameters/FileQuery.searchType'
        - $ref: '#/components/parameters/FileQuery.type'
        - $ref: '#/components/parameters/FileQuery.path'
        - $ref: '#/components/parameters/FileQuery.operation'
        - $ref: '#/components/parameters/FileQuery.deepSearch'
        - $ref: '#/components/parameters/FileQuery.shared'
        - $ref: '#/components/parameters/FileQuery.parentId'
        - $ref: '#/components/parameters/FileQuery.category'
        - $ref: '#/components/parameters/FileQuery.updatedAt'
        - $ref: '#/components/parameters/FileQuery.sort'
        - $ref: '#/components/parameters/FileQuery.order'
        - $ref: '#/components/parameters/FileQuery.limit'
        - $ref: '#/components/parameters/FileQuery.page'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileList'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Files
      security:
        - BearerAuth: []
    post:
      operationId: Files_create
      summary: Create a new file
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileCreate'
      security:
        - BearerAuth: []
  /api/files/categories:
    get:
      operationId: Files_categoryStats
      summary: Get category stats
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryStats'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Files
      security:
        - BearerAuth: []
  /api/files/delete:
    post:
      operationId: Files_delete
      summary: Delete files
      parameters: []
      responses:
        '204':
          description: There is no content to send for this request, but the headers may be useful.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileDelete'
      security:
        - BearerAuth: []
  /api/files/mkdir:
    post:
      operationId: Files_mkdir
      summary: Create Folders
      parameters: []
      responses:
        '204':
          description: There is no content to send for this request, but the headers may be useful.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileMkDir'
      security:
        - BearerAuth: []
  /api/files/move:
    post:
      operationId: Files_move
      summary: Move files
      parameters: []
      responses:
        '204':
          description: There is no content to send for this request, but the headers may be useful.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileMove'
      security:
        - BearerAuth: []
  /api/files/{id}:
    get:
      operationId: Files_getById
      summary: Get file by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Files
      security:
        - BearerAuth: []
    patch:
      operationId: Files_update
      summary: Update file
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileUpdate'
      security:
        - BearerAuth: []
  /api/files/{id}/copy:
    post:
      operationId: Files_copy
      summary: Copy file
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileCopy'
      security:
        - BearerAuth: []
  /api/files/{id}/download/{name}:
    get:
      operationId: Files_download
      summary: Download file by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: hash
          in: query
          required: false
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: File streaming response
          headers:
            Accept-Ranges:
              required: true
              description: Indicates server supports range requests
              schema:
                type: string
                enum:
                  - bytes
            Content-Length:
              required: true
              description: Size of the response body in bytes
              schema:
                type: string
            Content-Disposition:
              required: true
              description: File attachment information
              schema:
                type: string
            Content-Range:
              required: false
              description: Range of bytes being sent
              schema:
                type: string
            ETag:
              required: true
              description: Entity tag for cache validation
              schema:
                type: string
            Last-Modified:
              required: true
              description: Last modification timestamp
              schema:
                type: string
                format: date-time
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '206':
          description: File streaming response
          headers:
            Accept-Ranges:
              required: true
              description: Indicates server supports range requests
              schema:
                type: string
                enum:
                  - bytes
            Content-Length:
              required: true
              description: Size of the response body in bytes
              schema:
                type: string
            Content-Disposition:
              required: true
              description: File attachment information
              schema:
                type: string
            Content-Range:
              required: false
              description: Range of bytes being sent
              schema:
                type: string
            ETag:
              required: true
              description: Entity tag for cache validation
              schema:
                type: string
            Last-Modified:
              required: true
              description: Last modification timestamp
              schema:
                type: string
                format: date-time
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '416':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Files
      security:
        - BearerAuth: []
  /api/files/{id}/parts:
    put:
      operationId: Files_updateParts
      summary: Update file parts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: There is no content to send for this request, but the headers may be useful.
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilePartsUpdate'
      security:
        - BearerAuth: []
  /api/files/{id}/share:
    delete:
      operationId: Files_deleteShare
      summary: Delete share
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: There is no content to send for this request, but the headers may be useful.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Files
      security:
        - BearerAuth: []
    get:
      operationId: Files_shareByid
      summary: Get share by file ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileShare'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Files
      security:
        - BearerAuth: []
    patch:
      operationId: Files_editShare
      summary: Edit share
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: There is no content to send for this request, but the headers may be useful.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileShareCreate'
      security:
        - BearerAuth: []
    post:
      operationId: Files_createShare
      summary: Create a share for the file
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileShareCreate'
      security:
        - BearerAuth: []
  /api/files/{id}/stream/{name}:
    get:
      operationId: Files_stream
      summary: Stream file by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: hash
          in: query
          required: false
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: File streaming response
          headers:
            Accept-Ranges:
              required: true
              description: Indicates server supports range requests
              schema:
                type: string
                enum:
                  - bytes
            Content-Length:
              required: true
              description: Size of the response body in bytes
              schema:
                type: string
            Content-Disposition:
              required: true
              description: File attachment information
              schema:
                type: string
            Content-Range:
              required: false
              description: Range of bytes being sent
              schema:
                type: string
            ETag:
              required: true
              description: Entity tag for cache validation
              schema:
                type: string
            Last-Modified:
              required: true
              description: Last modification timestamp
              schema:
                type: string
                format: date-time
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '206':
          description: File streaming response
          headers:
            Accept-Ranges:
              required: true
              description: Indicates server supports range requests
              schema:
                type: string
                enum:
                  - bytes
            Content-Length:
              required: true
              description: Size of the response body in bytes
              schema:
                type: string
            Content-Disposition:
              required: true
              description: File attachment information
              schema:
                type: string
            Content-Range:
              required: false
              description: Range of bytes being sent
              schema:
                type: string
            ETag:
              required: true
              description: Entity tag for cache validation
              schema:
                type: string
            Last-Modified:
              required: true
              description: Last modification timestamp
              schema:
                type: string
                format: date-time
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '416':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Files
      security:
        - BearerAuth: []
  /api/shares/{id}:
    get:
      operationId: Shares_getById
      summary: Get share by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Shares
  /api/shares/{id}/files:
    get:
      operationId: Shares_listFiles
      summary: List files in share
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileList'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Shares
  /api/shares/{id}/files/{fileId}/download/{name}:
    get:
      operationId: Shares_downloadFile
      summary: Download shared file
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: fileId
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File streaming response
          headers:
            Accept-Ranges:
              required: true
              description: Indicates server supports range requests
              schema:
                type: string
                enum:
                  - bytes
            Content-Length:
              required: true
              description: Size of the response body in bytes
              schema:
                type: string
            Content-Disposition:
              required: true
              description: File attachment information
              schema:
                type: string
            Content-Range:
              required: false
              description: Range of bytes being sent
              schema:
                type: string
            ETag:
              required: true
              description: Entity tag for cache validation
              schema:
                type: string
            Last-Modified:
              required: true
              description: Last modification timestamp
              schema:
                type: string
                format: date-time
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '206':
          description: File streaming response
          headers:
            Accept-Ranges:
              required: true
              description: Indicates server supports range requests
              schema:
                type: string
                enum:
                  - bytes
            Content-Length:
              required: true
              description: Size of the response body in bytes
              schema:
                type: string
            Content-Disposition:
              required: true
              description: File attachment information
              schema:
                type: string
            Content-Range:
              required: false
              description: Range of bytes being sent
              schema:
                type: string
            ETag:
              required: true
              description: Entity tag for cache validation
              schema:
                type: string
            Last-Modified:
              required: true
              description: Last modification timestamp
              schema:
                type: string
                format: date-time
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '416':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Shares
  /api/shares/{id}/files/{fileId}/stream/{name}:
    get:
      operationId: Shares_streamFile
      summary: Stream shared file
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: fileId
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File streaming response
          headers:
            Accept-Ranges:
              required: true
              description: Indicates server supports range requests
              schema:
                type: string
                enum:
                  - bytes
            Content-Length:
              required: true
              description: Size of the response body in bytes
              schema:
                type: string
            Content-Disposition:
              required: true
              description: File attachment information
              schema:
                type: string
            Content-Range:
              required: false
              description: Range of bytes being sent
              schema:
                type: string
            ETag:
              required: true
              description: Entity tag for cache validation
              schema:
                type: string
            Last-Modified:
              required: true
              description: Last modification timestamp
              schema:
                type: string
                format: date-time
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '206':
          description: File streaming response
          headers:
            Accept-Ranges:
              required: true
              description: Indicates server supports range requests
              schema:
                type: string
                enum:
                  - bytes
            Content-Length:
              required: true
              description: Size of the response body in bytes
              schema:
                type: string
            Content-Disposition:
              required: true
              description: File attachment information
              schema:
                type: string
            Content-Range:
              required: false
              description: Range of bytes being sent
              schema:
                type: string
            ETag:
              required: true
              description: Entity tag for cache validation
              schema:
                type: string
            Last-Modified:
              required: true
              description: Last modification timestamp
              schema:
                type: string
                format: date-time
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '416':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Shares
  /api/uploads/stats:
    get:
      operationId: Uploads_stats
      summary: Get upload stats
      parameters:
        - name: days
          in: query
          required: true
          schema:
            type: integer
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UploadStats'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Uploads
      security:
        - BearerAuth: []
  /api/uploads/{id}:
    post:
      operationId: Uploads_upload
      summary: Upload file
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/UploadQuery.partName'
        - $ref: '#/components/parameters/UploadQuery.fileName'
        - $ref: '#/components/parameters/UploadQuery.partNo'
        - $ref: '#/components/parameters/UploadQuery.channelId'
        - $ref: '#/components/parameters/UploadQuery.encrypted'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadPart'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Uploads
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      security:
        - BearerAuth: []
    get:
      operationId: Uploads_partsById
      summary: Get uploaded parts by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UploadPart'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Uploads
      security:
        - BearerAuth: []
    delete:
      operationId: Uploads_delete
      summary: Delete uploaded file
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: There is no content to send for this request, but the headers may be useful.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Uploads
      security:
        - BearerAuth: []
  /api/users/bots:
    post:
      operationId: Users_addBots
      summary: Add bots to user account
      parameters: []
      responses:
        '204':
          description: There is no content to send for this request, but the headers may be useful.
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      security:
        - BearerAuth: []
    delete:
      operationId: Users_removeBots
      summary: Remove bots from user account
      parameters: []
      responses:
        '204':
          description: There is no content to send for this request, but the headers may be useful.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Users
      security:
        - BearerAuth: []
  /api/users/channels:
    get:
      operationId: Users_listChannels
      summary: List user channels
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Users
      security:
        - BearerAuth: []
    patch:
      operationId: Users_updateChannel
      summary: Update user channel
      parameters: []
      responses:
        '204':
          description: There is no content to send for this request, but the headers may be useful.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelUpdate'
      security:
        - BearerAuth: []
  /api/users/config:
    get:
      operationId: Users_stats
      summary: Get user config
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConfig'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Users
      security:
        - BearerAuth: []
  /api/users/profile:
    get:
      operationId: Users_profileImage
      summary: Get user profile photo
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Users
      security:
        - BearerAuth: []
  /api/users/sessions:
    get:
      operationId: Users_listSessions
      summary: List user sessions
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSession'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Users
      security:
        - BearerAuth: []
  /api/users/sessions/{id}:
    delete:
      operationId: Users_removeSession
      summary: Remove user session
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: There is no content to send for this request, but the headers may be useful.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      tags:
        - Users
      security:
        - BearerAuth: []
components:
  parameters:
    FileQuery.category:
      name: category
      in: query
      required: false
      description: File category
      schema:
        $ref: '#/components/schemas/Category'
      explode: false
    FileQuery.deepSearch:
      name: deepSearch
      in: query
      required: false
      description: Enable deep search
      schema:
        type: boolean
      explode: false
    FileQuery.limit:
      name: limit
      in: query
      required: false
      description: Items per page
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 500
      explode: false
    FileQuery.name:
      name: name
      in: query
      required: false
      description: File name filter
      schema:
        type: string
      explode: false
    FileQuery.operation:
      name: operation
      in: query
      required: false
      description: Operation
      schema:
        type: string
        enum:
          - list
          - find
        default: list
      explode: false
    FileQuery.order:
      name: order
      in: query
      required: false
      description: Sort order
      schema:
        type: string
        enum:
          - asc
          - desc
        default: asc
      explode: false
    FileQuery.page:
      name: page
      in: query
      required: false
      description: Page number
      schema:
        type: integer
        minimum: 1
        default: 1
      explode: false
    FileQuery.parentId:
      name: parentId
      in: query
      required: false
      description: Parent folder ID
      schema:
        type: string
      explode: false
    FileQuery.path:
      name: path
      in: query
      required: false
      description: File path
      schema:
        type: string
      explode: false
    FileQuery.query:
      name: query
      in: query
      required: false
      description: Search query
      schema:
        type: string
      explode: false
    FileQuery.searchType:
      name: searchType
      in: query
      required: false
      description: Search type
      schema:
        type: string
        enum:
          - text
          - regex
        default: text
      explode: false
    FileQuery.shared:
      name: shared
      in: query
      required: false
      description: Show shared files
      schema:
        type: boolean
      explode: false
    FileQuery.sort:
      name: sort
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - name
          - updatedAt
          - size
        default: name
      explode: false
    FileQuery.type:
      name: type
      in: query
      required: false
      description: File type
      schema:
        type: string
        enum:
          - folder
          - file
      explode: false
    FileQuery.updatedAt:
      name: updatedAt
      in: query
      required: false
      description: Last update time
      schema:
        type: string
        format: date-time
      explode: false
    UploadQuery.channelId:
      name: channelId
      in: query
      required: false
      description: Optional channel identifier for upload
      schema:
        type: integer
        format: int64
      explode: false
    UploadQuery.encrypted:
      name: encrypted
      in: query
      required: false
      description: Whether the upload content is encrypted
      schema:
        type: boolean
        default: false
      explode: false
    UploadQuery.fileName:
      name: fileName
      in: query
      required: true
      description: Original file name
      schema:
        type: string
      explode: false
    UploadQuery.partName:
      name: partName
      in: query
      required: true
      description: Name of the part being uploaded
      schema:
        type: string
      explode: false
    UploadQuery.partNo:
      name: partNo
      in: query
      required: true
      description: Part number in sequence
      schema:
        type: integer
      explode: false
  schemas:
    ApiError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          example: 500
          description: Error code
        message:
          type: string
          example: Internal server error occurred
          description: Error message
      description: Standard error response
    Category:
      type: string
      enum:
        - archive
        - audio
        - document
        - image
        - other
        - video
      description: Supported file categories
    CategoryStats:
      type: object
      required:
        - totalFiles
        - totalSize
        - category
      properties:
        totalFiles:
          type: integer
          format: int64
          description: Total number of files
        totalSize:
          type: integer
          format: int64
          description: Total size of files in bytes
        category:
          allOf:
            - $ref: '#/components/schemas/Category'
          description: Category name
      example:
        totalFiles: 1250
        totalSize: 104857600
        category: document
      description: Statistics for files by category
    Channel:
      type: object
      required:
        - channelName
        - channelId
      properties:
        channelName:
          type: string
          description: Name of the Telegram channel
        channelId:
          type: integer
          format: int64
          description: Unique numeric identifier of the channel
      example:
        channelName: Channel Name
        channelId: 123456789
      description: Telegram channel information
    ChannelUpdate:
      type: object
      properties:
        channelName:
          type: string
          description: Name of the Telegram channel
        channelId:
          type: integer
          format: int64
          description: Unique numeric identifier of the channel
      example:
        channelName: Channel Name
        channelId: 123456789
      description: Telegram channel information
    File:
      type: object
      required:
        - name
        - type
        - category
        - size
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: File ID
          readOnly: true
        name:
          type: string
          example: document.pdf
          description: File name
        type:
          type: string
          enum:
            - folder
            - file
          example: file
          description: File type
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'
          description: File parts
        mimeType:
          type: string
          example: application/pdf
          description: MIME type
        category:
          allOf:
            - $ref: '#/components/schemas/Category'
          example: document
          description: File category
          readOnly: true
        parentId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Parent folder ID
        size:
          type: integer
          format: int64
          example: 1048576
          description: File size in bytes
        encrypted:
          type: boolean
          example: false
          description: Encryption status
        updatedAt:
          type: string
          format: date-time
          description: Last update time
          readOnly: true
        parentPath:
          type: string
          example: /documents/
          description: Parent folder path
          readOnly: true
      description: File metadata
    FileCopy:
      type: object
      required:
        - destination
      properties:
        newName:
          type: string
          description: New file name
        destination:
          type: string
          description: Destination path for the copied file
      example:
        newName: document_copy.pdf
        destination: /Documents/2023/
      description: File Copy request
    FileCreate:
      type: object
      required:
        - name
        - type
        - size
      properties:
        name:
          type: string
          example: document.pdf
          description: File name
        type:
          type: string
          enum:
            - folder
            - file
          example: file
          description: File type
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'
          description: File parts
        mimeType:
          type: string
          example: application/pdf
          description: MIME type
        channelId:
          type: integer
          format: int64
          example: 123456789
          description: Channel ID
        path:
          type: string
          example: /documents/2023/
          description: File path
        parentId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Parent folder ID
        size:
          type: integer
          format: int64
          example: 1048576
          description: File size in bytes
        encrypted:
          type: boolean
          example: false
          description: Encryption status
      description: File metadata
    FileDelete:
      type: object
      required:
        - destination
      properties:
        ids:
          type: array
          items:
            type: string
          description: Array of file or folders ids to be deleted
        source:
          type: string
          description: Source file path to be deleted
        destination:
          type: string
          description: Destination path where files will be moved to
      example:
        ids:
          - 123e4567-e89b-12d3-a456-426614174000
        destination: /Documents/2023/
      description: Delete operation request
    FileList:
      type: object
      required:
        - files
        - meta
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
          minItems: 0
          maxItems: 1000
          description: Array of file entries in the current page
        meta:
          allOf:
            - $ref: '#/components/schemas/Meta'
          description: Pagination metadata and total count information
      description: Paginated file listing response with metadata
    FileMkDir:
      type: object
      required:
        - paths
      properties:
        paths:
          type: array
          items:
            type: string
          description: Directory path(s) to be created
      example:
        paths:
          - /Documents/2023/
          - /Documents/2024/
      description: Request to create directories
    FileMove:
      type: object
      required:
        - destination
      properties:
        ids:
          type: array
          items:
            type: string
          description: Array of file or folders ids to be moved
        source:
          type: string
          description: Source path to move files from
        destination:
          type: string
          description: Destination path where files will be moved to
      example:
        ids:
          - 123e4567-e89b-12d3-a456-426614174000
        destination: /Documents/2023/
      description: Move multiple files by ids or path
    FilePartsUpdate:
      type: object
      required:
        - channelId
        - size
        - updatedAt
      properties:
        channelId:
          type: integer
          format: int64
          example: 123456
          description: Channel ID
        uploadId:
          type: string
          description: Upload ID
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'
          description: File parts
        size:
          type: integer
          format: int64
          example: 1048576
          description: File size in bytes
        updatedAt:
          type: string
          format: date-time
          description: Last update time
      description: File parts update request
    FileShare:
      type: object
      required:
        - protected
        - type
        - name
      properties:
        protected:
          type: boolean
          example: true
          description: Indicates if the shared file requires password protection
        userId:
          type: integer
          format: int64
          example: 123456789
          description: ID of the user who created the share
        type:
          type: string
          enum:
            - folder
            - file
          example: file
          description: File type
        name:
          type: string
          description: Name of the shared file or folder
        expiresAt:
          type: string
          format: date-time
          description: Expiration date and time of the share link
      description: File sharing information and settings
    FileShareCreate:
      type: object
      properties:
        password:
          type: string
          example: securepass123
          description: Share password
        expiresAt:
          type: string
          format: date-time
          description: Share expiration date
      description: File share creation request
    FileUpdate:
      type: object
      properties:
        name:
          type: string
          example: document.pdf
          description: File name
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'
          description: File parts
        size:
          type: integer
          format: int64
          example: 1048576
          description: File size in bytes
        updatedAt:
          type: string
          format: date-time
          description: Last update time
      description: File update request
    FolderCreate:
      type: object
      required:
        - path
      properties:
        path:
          type: string
          example: /Documents/2023/
          description: Directory path to create
    Meta:
      type: object
      properties:
        count:
          type: integer
          example: 1250
          minimum: 0
          description: Total number of items matching the query
        totalPages:
          type: integer
          example: 25
          minimum: 1
          description: Total number of available pages based on limit
        currentPage:
          type: integer
          example: 1
          minimum: 1
          description: Current page number in the pagination
      description: Pagination metadata containing count, page information
    Part:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          example: 1
          description: Part ID
        salt:
          type: string
          example: abc123
          description: Encryption salt
      description: File part information
    Session:
      type: object
      required:
        - name
        - userName
        - userId
        - isPremium
        - hash
        - expires
      properties:
        name:
          type: string
          example: John Doe
          description: User's display name or full name
        userName:
          type: string
          example: johndoe
          description: Telegram username without @ symbol
        userId:
          type: integer
          format: int64
          example: 123456789
          minimum: 1
          description: Telegram user ID (unique identifier)
        isPremium:
          type: boolean
          example: true
          description: Premium subscription status
        hash:
          type: string
          example: a1b2c3d4e5f6g7h8i9j0
          description: Session hash for verification and security
        expires:
          type: string
          format: date-time
          description: Session expiration date
      description: User session information containing authentication and profile details
    SessionCreate:
      type: object
      required:
        - name
        - userName
        - userId
        - isPremium
        - hash
        - expires
        - session
      properties:
        name:
          type: string
          example: John Doe
          description: User's display name or full name
        userName:
          type: string
          example: johndoe
          description: Telegram username without @ symbol
        userId:
          type: integer
          format: int64
          example: 123456789
          minimum: 1
          description: Telegram user ID (unique identifier)
        isPremium:
          type: boolean
          example: true
          description: Premium subscription status
        hash:
          type: string
          example: a1b2c3d4e5f6g7h8i9j0
          description: Session hash for verification and security
        expires:
          type: string
          format: date-time
          description: Session expiration date
        session:
          type: string
          description: Optional session token for client identification
      description: User session information containing authentication and profile details
    UploadPart:
      type: object
      required:
        - name
        - partId
        - partNo
        - channelId
        - size
        - encrypted
      properties:
        name:
          type: string
          description: Name identifier of the part
        partId:
          type: integer
          description: Telegram Message ID
        partNo:
          type: integer
          description: Sequential number of the part
        channelId:
          type: integer
          format: int64
          description: Channel identifier associated with the upload
        size:
          type: integer
          format: int64
          description: Size of the part in bytes
        encrypted:
          type: boolean
          description: Indicates if the part is encrypted
        salt:
          type: string
          description: Salt value used for encryption, required if encrypted is true
      description: Details of an uploaded part
    UploadStats:
      type: object
      required:
        - uploadDate
        - totalUploaded
      properties:
        uploadDate:
          type: string
          format: date-time
          description: Date and time when the upload occurred
        totalUploaded:
          type: integer
          format: int64
          description: Total number of bytes uploaded
      description: Statistics about the upload
    UserConfig:
      type: object
      required:
        - channelId
        - bots
      properties:
        channelId:
          type: integer
          format: int64
          description: Channel identifier associated with the user
        bots:
          type: array
          items:
            type: string
          description: List of bot tokens
      example:
        channelId: 123456789
        bots:
          - bot1
          - bot2
      description: User configuration for channel and bot settings
    UserSession:
      type: object
      required:
        - hash
        - createdAt
        - valid
        - current
      properties:
        hash:
          type: string
          description: Unique hash identifier for the session
        createdAt:
          type: string
          format: date-time
          description: Session creation timestamp
        location:
          type: string
          description: Geographic location where session was created
        officialApp:
          type: boolean
          description: Indicates if session is from an official Telegram app
        appName:
          type: string
          description: Name of the application used for session
        valid:
          type: boolean
          description: Indicates if the session is still valid
        current:
          type: boolean
          description: Indicates if this is the currently active session
      example:
        hash: a1b2c3d4e5f6g7h8i9j0
        createdAt: 2023-10-21T07:28:00Z
        location: New York, USA
        officialApp: true
        appName: Telegram
        valid: true
        current: true
      description: User session information
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
servers:
  - url: '{url}'
    description: Teldrive Server URL
    variables:
      url:
        default: ''
